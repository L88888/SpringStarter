#\u81EA\u5B9A\u4E49\u5E94\u7528\u670D\u52A1\u7AEF\u53E3,\u9ED8\u8BA4\u4E3APORT
server.port = 2003
#\u6CE8\u518C\u670D\u52A1\u4E2D\u5FC3IP
spring.application.name = design-pattern
#\u670D\u52A1\u8BBF\u95EE\u8DEF\u5F84,\u4E3B\u8981\u7528\u4E8E\u9759\u6001\u8BBF\u95EEswagger2\u4F7F\u7528.
#gateway.hostname = 127.0.0.1:10001/${spring.application.name}
gateway.hostname = 127.0.0.1:${server.port}
service_gateway.hostname=172.20.32.154
service_gateway.port=10001
#\u9879\u76EE\u6807\u8BC6
spring.jmx.default-domain = ${spring.application.name}
spring.jta.atomikos.properties.log-base-name=${spring.application.name}log

ipass_service_url=http://127.0.0.1:2002/external-interface

#\u6253\u5370sql\u8BED\u53E5
logging.level.com.sailing=INFO
#pgsql
#spring.datasource.url=jdbc:postgresql://172.20.32.154:15432/videomanager_154
#spring.datasource.username=postgres
#spring.datasource.password=Sailing@123
#spring.datasource.driver-class-name=org.postgresql.Driver
#spring.datasource.type=com.alibaba.druid.pool.DruidDataSource
##\u914D\u7F6E\u6570\u636E\u6E90Druid
#spring.datasource.initialSize=5
#spring.datasource.minIdle=5
#spring.datasource.maxActive=20
#spring.datasource.maxWait=60000
#spring.datasource.timeBetweenEvictionRunsMillis=60000
#spring.datasource.minEvictableIdleTimeMillis=300000
#spring.datasource.validationQuery=SELECT 1
#spring.datasource.testWhileIdle=true
#spring.datasource.testOnBorrow=false
#spring.datasource.testOnReturn=false
#spring.datasource.poolPreparedStatements=true
#spring.datasource.maxPoolPreparedStatementPerConnectionSize=20
#spring.datasource.filters=stat,log4j
#spring.datasource.connectionProperties=druid.stat.mergeSql=true;druid.stat.slowSqlMillis=5000

# 下面为连接池的补充设置，应用到上面所有数据源中
#自动提交
spring.datasource.default-auto-commit=true
#指定updates是否自动提交
spring.datasource.auto-commit=true
spring.jpa.show-sql = true
spring.datasource.maximum-pool-size=100
spring.datasource.max-idle=10
spring.datasource.max-wait=10000
spring.datasource.min-idle=5
spring.datasource.initial-size=5
spring.datasource.validation-query=SELECT 1
spring.datasource.test-on-borrow=false
spring.datasource.test-while-idle=true
# 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒
spring.datasource.time-between-eviction-runs-millis=18800
# 配置一个连接在池中最小生存的时间，单位是毫秒
spring.datasource.minEvictableIdleTimeMillis=300000


### clickhouse连接池基本配置
#spring.datasource.primary.driverClassName= ru.yandex.ckhelper.ClickHouseDriver
#spring.datasource.primary.url= jdbc:ckhelper://182.168.80.20:20212/default
#spring.datasource.primary.dataSourceProperties.serverName=182.168.80.20
#spring.datasource.primary.dataSourceProperties.portNumber=20212
#spring.datasource.primary.dataSourceProperties.databaseName=default
#spring.datasource.primary.username=default
#spring.datasource.primary.password=sailing@123

#pgsql
#spring.datasource.primary.driverClassName= org.postgresql.Driver
#spring.datasource.primary.url= jdbc:postgresql://182.168.80.20:55433/postgres
#spring.datasource.primary.username=postgres
#spring.datasource.primary.password=postgres


#############################################################################################
############################数据库相关配置#########################################################
#############################################################################################
#DBLink.name 配置这个属性的意义在于，如果存在多个数据源，监控的时候可以通过名字来区分开来。
DBLink.name=baseJDBC
#DBLink.jdbcUrl 连接数据库的url，不同数据库不一样
DBLink.url=jdbc:postgresql://182.168.80.20:55433/postgres
#DBLink.username 连接数据库的用户名
DBLink.username=postgres
#DBLink.password 连接数据库的密码。
DBLink.password=postgres
#driverClassName 根据url自动识别
DBLink.driverClassName=org.postgresql.Driver
#DBLink.initialSize 0 初始化时建立物理连接的个数。初始化发生在显示调用init方法，或者第一次getConnection时
DBLink.initialSize=10
#DBLink.maxActive 8 连接池中最大连接数量
DBLink.maxActive=100
#DBLink.maxIdle 8 连接池中最大连接数量，已经不再使用，配置了也没效果
#DBLink.maxIdle=1
#DBLink.minIdle 0 连接池中最小连接数量
DBLink.minIdle=2
#DBLink.maxWait -1 获取连接时最大等待时间，单位毫秒。
#配置了DBLink.maxWait之后，缺省启用公平锁，并发效率会有所下降，如果需要可以通过配置useUnfairLock属性为true使用非公平锁。
DBLink.useUnfairLock=true
#获取连接等待的时间,如果超过这个时间没有得到连接会报错:com.alibaba.druid.pool.GetConnectionTimeoutException
DBLink.maxWait=4000
#DBLink.poolPreparedStatements false 是否缓存preparedStatement，也就是PSCache。
#PSCache对支持游标的数据库性能提升巨大，比如说oracle。在mysql5.5以下的版本中没有PSCache功能，建议关闭掉。
#5.5及以上版本有PSCache，建议开启。
DBLink.poolPreparedStatements = true
#DBLink.maxOpenPreparedStatements -1 要启用PSCache，必须配置大于0，当大于0时，poolPreparedStatements自动触发修改为true。
#在Druid中，不会存在Oracle下PSCache占用内存过多的问题，可以把这个数值配置大一些，比如说100
DBLink.maxOpenPreparedStatements = 100
#DBLink.maxPoolPreparedStatementsPerConnectionSize 10 为每个连接缓存的preparedStatement的最大数量
DBLink.maxPoolPreparedStatementsPerConnectionSize = 10
#DBLink.validationQuery null 用来检测连接是否有效的sql，要求是一个查询语句。
#如果DBLink.validationQuery为null，testOnBorrow、testOnReturn、testWhileIdle都不会起作用
DBLink.validationQuery=SELECT 1;
#vDBLink.alidationQueryTimeout -1 执行validationQuery的超时时间
DBLink.validationQueryTimeout= 1000
#DBLink.testOnBorrow false 申请连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能
DBLink.testOnBorrow = true
#DBLink.testOnReturn false 归还连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能
DBLink.testOnReturn = true
#DBLink.testWhileIdle true 建议配置为true，不影响性能，并且保证安全性。
#申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效。
DBLink.testWhileIdle = true
#DBLink.timeBetweenEvictionRunsMillis -1L（最新版本1.0.17中已改为60 * 1000L）
#有两个含义：
#1) Destroy线程检测连接的间隔时间，此时如果未配置，则间隔1000毫秒
#2) testWhileIdle的判断依据，详细看testWhileIdle属性的说明
DBLink.timeBetweenEvictionRunsMillis= 30000
#DBLink.minEvictableIdleTimeMillis 1000L * 60L * 30L 空闲连接回收的最小空闲时间
DBLink.minEvictableIdleTimeMillis = 40000
#DBLink.numTestsPerEvictionRun 3 不再使用，一个DruidDataSource只支持一个EvictionRun
#DBLink.numTestsPerEvictionRun=
#DBLink.connectionInitSqls 物理连接初始化的时候执行的sql
DBLink.connectionInitSqls=SELECT 1;
#DBLink.exceptionSorter null，根据dbType自动识别 当数据库抛出一些不可恢复的异常时，抛弃连接
DBLink.exceptionSorter=
#DBLink.filters 属性类型是字符串，通过别名的方式配置扩展插件，常用的插件有：
#监控统计用的filter:stat
#日志用的filter:log4j
#防御sql注入的filter:wall
DBLink.filters=stat,log4j,default
#proxyFilters 类型是List<com.alibaba.druid.filter.Filter>，如果同时配置了filters和proxyFilters，是组合关系，并非替换关系
#proxyFilters=
#DBLink.removeAbandoned  false 是否强制关闭连接时长大于removeAbandonedTimeoutMillis的连接
DBLink.removeAbandoned=true
#DBLink.removeAbandonedTimeoutMillis 300 * 1000 一个连接从被连接到被关闭之间的最大生命周期
DBLink.removeAbandonedTimeout= 120
#DBLink.logAbandoned false 强制关闭连接时是否记录日志
DBLink.logAbandoned= true
#DBLink.queryTimeout 执行查询的超时时间(秒)，执行Statement对象时如果超过此时间，则抛出SQLException
DBLink.queryTimeout= 2000
#DBLink.transactionQueryTimeout 执行一个事务的超时时间(秒)，执行Statement对象 时判断是否为事务，如果是且此项未设置，则使用queryTimeout
DBLink.transactionQueryTimeout=2000